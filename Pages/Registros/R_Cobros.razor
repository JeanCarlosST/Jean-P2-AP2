@page "/r_cobros"
@inject IToastService toast
<EditForm Model="Cobro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator/>

    <div class="container">

        <div class="row">

            <div class="col">

                <div class="card">

                    <div class="card-header">
                        <h3>Registro de cobros</h3>
                    </div>

                    <div class="card-body">

                        <form>

                            <div class="form-row justify-content-between">

                                <div class="form-group">
                                    <label>Cobro ID:</label>
                                    <div class="input-group">
                                        <InputNumber class="form-control" @bind-Value="Cobro.CobroID"/>
                                        <button class="btn btn-warning" type="button" @onclick="Buscar">
                                            <i class="oi oi-magnifying-glass mr-2" />Buscar
                                        </button>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label>Fecha:</label>
                                    <InputDate class="form-control" @bind-Value="Cobro.Fecha"/>
                                </div>
                            </div>

                            <div class="form-group">
                                <label>Cliente:</label>
                                <InputSelect class="form-control" @bind-Value="Cobro.ClienteID" @onclick="BuscarVentasCliente">
                                    @foreach (var cliente in Clientes)
                                    {
                                        <option value="@cliente.ClienteID">@cliente.Nombres</option>
                                    }
                                </InputSelect>
                            </div>

                            <fieldset class="form-group border border-2 p-2">

                                <legend class="w-auto">
                                    Facturas pendientes
                                </legend>

                                <table class="table mb-0">
                                    <thead>
                                        <tr>
                                            <th class="text-center">ID</th>
                                            <th class="text-center">Fecha</th>
                                            <th class="text-center">Monto</th>
                                            <th class="text-center">Balance</th>
                                            <th class="text-center">Cobrado</th>
                                            <th class="text-center">Pagar</th>
                                        </tr>
                                    </thead>

                                    <tbody>

                                        @foreach(var detalle in Detalle)
                                        {
                                            <tr>
                                                <td class="text-center align-baseline">@detalle.Venta.VentaID</td>
                                                <td class="text-center align-baseline">@detalle.Venta.Fecha</td>
                                                <td class="text-center align-baseline">@detalle.Venta.Monto</td>
                                                <td class="text-center align-baseline">@detalle.Venta.Balance</td>
                                                <td class="d-flex justify-content-center">
                                                    <input type="number" class="form-control text-right w-50" value="@detalle.Cobrado" min="1" max="99999"
                                                           @onchange="eventArgs => { detalle.Cobrado = Convert.ToSingle(eventArgs.Value); CobrarVenta(detalle); }"/>
                                                    @*<InputNumber class="form-control w-50" @onchange="AjustarTotales" @bind-Value="detalle.Cobrado"/>*@
                                                </td>
                                                <td class="text-center">
                                                    <input type="checkbox" class="form-check-input" value="@detalle.Pagado" @onchange="eventArgs => { CobrarTotalVenta(detalle, eventArgs.Value); }"/>
                                                </td>
                                            </tr>
                                        }

                                    </tbody>
                                </table>
                                
                            </fieldset> 

                        </form>

                    </div>

                    <div class="card-footer">

                        <form>
                            
                            <div class="form-row justify-content-between">

                                <div class="form-group">
                                    <label>Totales:</label>
                                    <InputNumber class="form-control" @bind-Value="Totales" readonly />
                                </div>
                                
                                <div class="form-group">
                                    <label></label>
                                    <InputNumber class="form-control text-right" @bind-Value="TotalCobrado" readonly />
                                </div>
                            </div>
                        
                            <div class="form-group">
                                <label>Observaciones:</label>
                                <InputTextArea class="form-control" @bind-Value="Cobro.Observaciones"/>
                            </div>

                        </form>

                    </div>

                    <div class="card-footer">
                        <div class="row justify-content-center">
                            <button class="btn btn-primary col-3" type="button" @onclick="Nuevo">
                                <i class="oi oi-file mr-2" />Nuevo
                            </button>

                            <button class="btn btn-success col-3 mx-2">
                                <i class="oi oi-account-login mr-2" style="transform:rotate(90deg)" />Guardar
                            </button>

                            <button class="btn btn-danger col-3" type="button" @onclick="Eliminar">
                                <i class="oi oi-trash mr-2" />Eliminar
                            </button>

                        </div>

                    </div>

                </div>

            </div>

        </div>

    </div>

</EditForm>

@code {
        public Cobros Cobro { get; set; } = new Cobros();
        public List<Clientes> Clientes { get; set; } = new List<Clientes>();
        public Clientes Cliente { get; set; }
        public List<DetalleWrapper> Detalle { get; set; } = new List<DetalleWrapper>();
        public int Totales { get; set; }
        public float TotalCobrado { get; set; }

        protected override void OnInitialized()
        {
            base.OnInitialized();

            Clientes = ClientesBLL.ObtenerLista(c => true);
        }

        public void Buscar()
        {
            var encontrado = CobrosBLL.Buscar(Cobro.CobroID);

            if (encontrado != null)
            {
                Nuevo();
                this.Cobro = encontrado;
                GenerarDetalleBuscar();
                AjustarTotales();
            }
            else
                toast.ShowWarning("Cobro no encontrado");

        }

        public void GenerarDetalleBuscar()
        {
            foreach (var detalle in Cobro.Detalle)
            {
                var cobroDetalle = new DetalleWrapper() { Venta = VentasBLL.Buscar(detalle.VentaID), Cobrado = detalle.Cobrado, Pagado = true };
                Detalle.Add(cobroDetalle);
            }
        }

    public void BuscarVentasCliente()
    {
        var cliente = ClientesBLL.Buscar(Cobro.ClienteID);

        if(cliente != null)
        {
            this.Cliente = cliente;
            CrearDetalle();
        }
    }

    public void CrearDetalle()
    {
        var cobrosCantidad = Cliente.Ventas.Count;

        Detalle = new List<DetalleWrapper>(new DetalleWrapper[cobrosCantidad]);

        for(int i = 0; i < cobrosCantidad; i++)
        {
            var venta = Cliente.Ventas[i];
            Detalle[i] = new DetalleWrapper { Venta = venta };
        }
    }

    public void CobrarVenta(DetalleWrapper detalle)
    {
        detalle.Pagado = true;
        AjustarTotales();
    }

    public void CobrarTotalVenta(DetalleWrapper detalle, object value)
    {
        detalle.Pagado = (bool)value;

        if (detalle.Pagado)
            detalle.Cobrado = (float)detalle.Venta.Balance;
        else
            detalle.Cobrado = 0;

        AjustarTotales();
    }

    public void AjustarTotales()
    {
        Totales = 0;
        TotalCobrado = 0;

        var detalles = Detalle.FindAll(d => d.Cobrado > 0);

        Totales = detalles.Count;

        foreach(var detalle in detalles)
        {
            TotalCobrado += detalle.Cobrado;
        }
    }

    public void Nuevo()
    {
        Cobro = new Cobros();
        Cliente = new Clientes();
        Detalle = new List<DetalleWrapper>();
        Totales = 0;
        TotalCobrado = 0;
    }

    public void Guardar()
    {
        GenerarDetalleGuardar();

        bool guardado = CobrosBLL.Guardar(Cobro);

        if (guardado)
        {
            Nuevo();
            toast.ShowSuccess("Cobro guardado correctamente");
        }
        else
            toast.ShowError("No se puedo guardar el cobro");
    }

    public void GenerarDetalleGuardar()
    {
        Cobro.Detalle.Clear();

        foreach(var detalle in Detalle)
        {
            var cobroDetalle = new CobrosDetalle() { VentaID = detalle.Venta.VentaID, Cobrado = detalle.Cobrado };
            Cobro.Detalle.Add(cobroDetalle);
        }
    }

    public void Eliminar()
    {
        bool eliminado = CobrosBLL.Eliminar(Cobro.CobroID);

        if (eliminado)
        {
            Nuevo();
            toast.ShowSuccess("Cobro eliminado correctamente");
        }
        else
            toast.ShowError("No se pudo eliminar el cobro");
    }

    public class DetalleWrapper
    {
        public Ventas Venta { get; set; }
        public float Cobrado { get; set; }
        public bool Pagado { get; set; }
    }

}
